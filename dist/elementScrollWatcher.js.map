{"version":3,"sources":["elementScrollWatcher.js"],"names":["checkTargetPosXY","_x","_y","x","test","parseInt","y","uid","len","Math","random","toString","substr","EswItem","element","root","id","dataset","eswId","datumPointX","eswCheckX","checkX","datumPointY","eswCheckY","checkY","activeTimer","eswDelay","option","activeDelay","_isIntersecting","timer","activeFunction","active","deActiveFunction","deActive","directFunction","direct","window","setTimeout","clearTimeout","value","rect","getBoundingClientRect","pointY","height","winHeight","innerHeight","percentY","pointX","width","winWidth","innerWidth","percentX","elementsArray","elements","Array","from","document","querySelectorAll","length","defaultSetting","activePercentY","deActivePercentY","activePercentX","deActivePercentX","threshold","scroll","init","ElementScrollWatcher","setting","Object","assign","items","XY","io","IntersectionObserver","entries","forEach","entry","target","getEswObj","esw","isIntersecting","checkItems","push","index","indexOf","splice","eswObject","isInit","isDisable","boundMot","item","itemYPercent","itemXPercent","isActiveY","isDeActiveY","isActiveX","isDeActiveX","percent","mot","bind","addEventListener","eswInit","observe","addItems","concat","removeEventListener","unobserve"],"mappings":"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","file":"elementScrollWatcher.js","sourceRoot":"../src","sourcesContent":["/**\n * class ElementScrollWatcher\n * @author sanghyun jeung <eyekorea@cttd.co.kr>\n */\n\n/**\n * _x, _y 값을 체크하여 문자열인경우 유효한 값인지, 유효한 값이 아닌경우 px 값(Number)으로 리턴.\n * @param {String|Number} _x left|right|center or pixel number\n * @param {String|Number} _y top|bottom|middle or pixel number\n * @returns {Object} x, y string|number\n */\nfunction checkTargetPosXY(_x, _y){\n  const xPosReg = /left|right|center/g;\n  const yPosReg = /top|bottom|middle/g; \n  const x = (xPosReg.test(_x)) ? _x : parseInt(_x, 10);\n  const y = (yPosReg.test(_y)) ? _y : parseInt(_y, 10);\n  return {x, y};\n}\n\n/**\n * 난수를 리턴하는 함수.\n * @param {number} len\n * @returns {Number} len 의 값의 자릿수를 갖는 난수를 리턴\n */\nexport function uid(len) {\n  len = len || 7;\n  return Math.random()\n    .toString(35)\n    .substr(2, len);\n}\n\n/**\n * esw 제어를 위한 클래스\n * 감시 되는 엘리먼트 별로 해당 클래스가 생성됨.\n * @class\n */\nclass EswItem {\n  /**\n   * 클래스 생성시 감시되는 element 와 메인으로 실행되는 클래스 자신을 받음.\n   * @constructor EswItem\n   * @param {HTMLElement} element \n   * @param {ElementScrollWatcher} root \n   */\n  constructor(element, root){\n    this.id = uid(); // object 체크를 위한 id 난수\n    this.element = element;\n    this.element.dataset.eswId = this.id; \n\n    // element 의 개별 셋팅 값이 있는지 체크 하여 저장\n    this.datumPointX = (()=>{\n      if( element.dataset.eswCheckX ) {\n        return checkTargetPosXY(element.dataset.eswCheckX, 0).x;\n      } else {\n        return root.checkX;\n      };\n    })();\n\n    // element 의 개별 셋팅 y 값이 있는지 체크 하고 없으면 기본 셋팅값을 저장.\n    this.datumPointY = (()=>{\n      if( element.dataset.eswCheckY ) {\n        return checkTargetPosXY(0, element.dataset.eswCheckY).y;\n      } else {\n        return root.checkY;\n      };\n    })();\n    // element 의 개별 셋팅 delay 값이 있는지 체크 하고 없으면 기본 셋팅값을 적용.\n    this.activeTimer = (()=>{\n      if( element.dataset.eswDelay ) {\n        return parseInt(element.dataset.eswDelay, 10);\n      } else {\n        return root.option.activeDelay;\n      }\n    })();\n    this._isIntersecting = false; // 화면에 들어왔는지 유무\n    this.timer = null; // 타이머가 지정됨\n    this.activeFunction = root.option.active; // 활성화 되었을때 실행될 함수\n    this.deActiveFunction = root.option.deActive; // 비활성화 되었을때 실행될 함수\n    this.directFunction = root.option.direct; // 대기시간 없이 바로 실행될 함수\n  }\n\n  /**\n   * 화면안으로 들어오거나 나갔을때 해당 값을 셋팅 할 수 있음.\n   * 해당 값이 변경되면, 타이머를 초기화 하고 deActiveFunction 을 실행함.\n   * @param {boolean} value \n   */\n  set isIntersecting(value){\n    if( value !== this._isIntersecting ){\n      if( this.timer !== null ){\n        window.clearTimeout(this.timer);\n        this.timer = null;\n      }\n    }\n    if( !value ){\n      this.deActiveFunction && this.deActiveFunction(this.element);\n    }\n    this._isIntersecting = value;\n  }\n  \n  /**\n   * 엘리먼트 개별 기준값 을 대입한 값을 참고하여 화면기준으로 감시되는 엘리면트가 위치하는 Y 값의 백분율\n   * @returns {Number} \n   */\n  get percentY(){\n    const { element, datumPointY } = this;\n    const rect = element.getBoundingClientRect();\n    const pointY = (()=>{\n      if( typeof datumPointY === 'string' ) {\n        switch (datumPointY) {\n          case 'top':\n            return 0;\n          case 'bottom':\n            return rect.height;\n          default:\n            return rect.height / 2;\n        }\n      } else {\n        return datumPointY;\n      }\n    })();\n    const winHeight = window.innerHeight;\n    const y = rect.y + pointY;\n    const percentY = (winHeight - y) / winHeight * 100;\n    return percentY;\n  }\n\n  /**\n   * 엘리먼트 개별 기준값 을 대입한 값을 참고하여 화면기준으로 감시되는 엘리면트가 위치하는 X 값의 백분율\n   * @returns {Number} \n   */\n  // TODO: 개발 필요.\n  get percentX(){\n    const { element, datumPointX } = this;\n    const rect = element.getBoundingClientRect();\n    const pointX = (()=>{\n      if( typeof datumPointX === 'string' ) {\n        switch (datumPointX) {\n          case 'left':\n            return 0;\n          case 'right':\n            return rect.width;\n          default:\n            return rect.width / 2;\n        }\n      } else {\n        return datumPointX;\n      }\n    })();\n    const winWidth = window.innerWidth;\n    const x = rect.x + pointX;\n    const percentX = (winWidth - x) / winWidth * 100;\n    return percentX;\n  }\n\n  /**\n   * 타이머와 상관없이 진입시 실행되는 함수.\n   */\n  direct(){\n    if( this._isIntersecting ){\n      this.directFunction && this.directFunction(this.element);\n    }\n  }\n\n  /**\n   * 타이머를 활성화 하고, 함수 실행 준비 상태로 변경.\n   * _isIntersecting 이 true 인 경우 최종 activeFunction 를 실행.\n   * @method\n   */\n  active(){\n    const { activeTimer } = this;\n    if( this.timer === null ){\n      this.timer = window.setTimeout(()=>{\n        if( this._isIntersecting ){\n          this.activeFunction && this.activeFunction(this.element);\n        }\n      }, activeTimer);\n      this.direct();\n    }\n  }\n\n  /**\n   * _isIntersecting 값과 무관하게 강제로 함수 실행을 초기하고,\n   * deActiveFunction 을 실행함.\n   * @method\n   */\n  deActive(){\n    if( this.timer !== null ){\n      window.clearTimeout(this.timer);\n      this.timer = null;\n    }\n    this.deActiveFunction && this.deActiveFunction(this.element);\n  }\n}\n\n/**\n * string, nodeList, element 를 체크하여, [element] 로 리턴함.\n * @param {String|HTMLElement|NodeList} elements \n * @returns {Array} [... elements] \n */\nfunction elementsArray(elements){\n  if( typeof elements === 'string' ){\n    return Array.from(document.querySelectorAll(elements));\n  } else {\n    if( elements.length ) {\n      return Array.from(elements);\n    } else {\n      if( elements ) return [elements]\n    }\n  }\n}\n\n/**\n * ElementScrollWatcher 의 기본 setting 값\n * @namespace defaultSetting\n * @property {Window|HTMLElement} root - 스크롤 이벤트가 바인드 되는 영역.\n * @property {Number} activePercentY   - 진입 체크 시작 포인트 \n * @property {Number} deActivePercentY -  진입 체크 엔드 포인드\n * @property {Number} activePercentX\n * @property {Number} deActivePercentX\n * @property {Number} activeDelay      - 진입시 해당 시간 후 함수 실행됨.\n * @property {Number} threshold        - intersectionObserve 의 threshold \n * @property {null|function} direct    - 진입했을때 대기 없이 바로 실행 되는 callback\n * @property {null|function} active    - 진입했을때 실행될 callback \n * @property {null|function} deActive  - 나갔을때 실행될 callback\n * @property {null|function} scroll    - 스크롤 될때 실행될 callback\n * @property {boolean} init            - 최초 init 을 할지 옵션\n * @property {string|number} checkY    - top|middle|bottom|custom number(px),target 의 기준점.\n * @property {string|number} checkX    - left|center|right|custom number(px)\n */\nconst defaultSetting = {\n  root: null,\n  activePercentY: 60,\n  deActivePercentY : 90,\n  activePercentX: 0,\n  deActivePercentX : 100,\n  activeDelay: 1000,\n  threshold: 0.1,\n  direct: null,\n  active: null,\n  deActive: null,\n  scroll: null,\n  init: true,\n  checkY: 'top',\n  checkX: 'left'\n}\n\n/**\n * 메인 class.\n * 새로운 스크롤 감시자를 생성한다.\n * @class\n */\nexport default class ElementScrollWatcher {\n  /**\n   * @constructor\n   * @param {String|HTMLElement|HTMLCollection} elements String = selector ex) `.element` or `#id`\n   * @param {Ojbect} setting\n   * @param {Window|HTMLElement} setting.root - 스크롤 이벤트가 바인드 되는 영역.\n   * @param {Number} setting.activePercentY   - 진입 체크 시작 포인트 \n   * @param {Number} setting.deActivePercentY -  진입 체크 엔드 포인드\n   * @param {Number} setting.activePercentX\n   * @param {Number} setting.deActivePercentX\n   * @param {Number} setting.activeDelay     - 진입시 해당 시간 후 함수 실행됨.\n   * @param {Number} setting.threshold       - intersectionObserve 의 threshold \n   * @param {null|function} setting.direct   - 진입했을때 대기 없이 바로 실행 되는 callback\n   * @param {null|function} setting.active   - 진입했을때 실행될 callback \n   * @param {null|function} setting.deActive - 나갔을때 실행될 callback\n   * @param {null|function} setting.scroll   - 스크롤 될때 실행될 callback\n   * @param {boolean} setting.init           - 최초 init 을 할지 옵션\n   * @param {string|number} setting.checkY   - top|middle|bottom|custom number(px),target 의 기준점.\n   * @param {string|number} setting.checkX   - left|center|right|custom number(px)\n   */\n  constructor(elements, setting={}){\n    // set\n    const option = Object.assign({}, defaultSetting, setting);;\n    option.root = option.root === null ? window : option.root\n    const items = elementsArray(elements);\n    const checkItems = [];\n    const eswObject = {};\n    const XY = checkTargetPosXY(option.checkX, option.checkY);\n    const checkY = XY.y;\n    const checkX = XY.x;\n    const io = new IntersectionObserver(entries=>{ // IO 를 지정.\n      entries.forEach(entry => {\n        const target = entry.target;\n        const item = this.getEswObj(target);\n        item.esw.isIntersecting = entry.isIntersecting; // esw item 의 intersecting 값을 셋팅 한다.\n\n        // 화면에 들어오는 element 는 checkItems 에 넣고,\n        // 화면에서 나간 element 는 checkItems 에서 제거함.\n        // 스크롤시 loop 가 계속 돌게 되기 때문에 성능을 고려하여...\n        if( entry.isIntersecting ){\n          this.checkItems.push(target);\n        } else {\n          const index = this.checkItems.indexOf( target );\n          if( index >= 0 ){\n            this.checkItems.splice(index, 1);\n          }\n        }\n      });\n    });\n    \n    Object.assign(this, {\n      option,\n      items,\n      io,\n      checkItems,\n      checkY,\n      checkX,\n      eswObject,\n      isInit : false,\n      isDisable : false, // 비활성화 유무\n      boundMot: null // scroll event 를 저장함.\n    });\n    option.init && this.init();\n  }\n\n  /**\n   * element 의 dataset.eswId 값을 체크하여 object 를 리턴함.\n   * @param {element} element \n   * @returns {Object} HTMLElement, id, esw object\n   */\n  getEswObj(element){\n    const id = element.dataset.eswId;\n    const esw = this.eswObject[id];\n    return {element, id, esw};\n  }\n\n  // 스크롤시 실행함.\n  mot(){\n    if( this.isDisable ) return false;\n    const { checkItems , option } = this;\n    checkItems.forEach(element => {\n      const item = this.getEswObj(element);\n      const itemYPercent = item.esw.percentY;\n      const itemXPercent = item.esw.percentX;\n      const isIntersecting = item.esw._isIntersecting;\n\n      \n      const isActiveY = option.activePercentY < itemYPercent;\n      const isDeActiveY = option.deActivePercentY < itemYPercent;\n      const isActiveX = option.activePercentX < itemXPercent;\n      const isDeActiveX = option.deActivePercentX < itemXPercent;\n\n      if( isActiveY && isActiveX ){\n        if( isDeActiveY || isDeActiveX ) {\n          item.esw.deActive();\n        } else {\n          item.esw.active();\n        }\n      } else {\n        item.esw.deActive();\n      }\n\n      /**\n       * @namespace percent\n       * @property {Number} x - x축으로 이동된 양(백분율)\n       * @property {Number} y - y축으로 이동된 양(백분율)\n       */\n      const percent = {\n        x : itemXPercent, \n        y : itemYPercent,\n      }\n      option.scroll && option.scroll(element, percent, isIntersecting);\n    });\n  }\n\n  init(){\n    const { items, io, option, mot } = this;\n    this.boundMot = mot.bind(this);\n    if( !this.isInit ) {\n      option.root.addEventListener('scroll', this.boundMot, false);\n    }\n\n    items.forEach(element => {\n      if( !element.dataset.eswInit ){\n        const esw = new EswItem(element, this);\n        this.eswObject[esw.id] = esw;\n        io.observe(element, option.threshold);\n        element.dataset.eswInit = 'init'\n      }\n    })\n    this.isInit = true;\n    window.addEventListener('load', ()=>{\n      this.mot();  \n    });\n    this.mot();\n  }\n\n  /**\n   * 동적으로 element 가 생성 된 경우 사용.\n   * @param {HTMLCollection|HTMLElement|String} elements String = selector ex) `.element` or `#id`\n   */\n  update(elements){\n    const addItems = elementsArray(elements);\n    this.items = this.items.concat(addItems);\n    this.init();\n  }\n  disable(){\n    this.isDisable = true;\n  }\n  enable(){\n    this.isDisable = false;\n  }\n  destroy(){\n    const { items, io, option } = this;\n    option.root.removeEventListener('scroll', this.boundMot, false);\n    items.forEach(element => {\n      io.unobserve(element);\n      delete element.dataset.eswId;\n      delete element.dataset.eswInit;\n    });\n\n    delete this.boundMot;\n    delete this.io;\n    delete this.items;\n    delete this.checkItems;\n    delete this.checkY;\n    delete this.checkX;\n    delete this.eswObject;\n    delete this.isInit;\n    delete this.isDisable;\n    delete this.option;\n    delete this;\n  }\n}"]}